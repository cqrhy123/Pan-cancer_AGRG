library("pheatmap")
library("ggplot2")
library("foreach")
library("doParallel")
library("randomForestSRC")
library("ggRandomForests")
library("Hmisc")
library("glmnet")
library("survival")
library("survminer")
library("survivalROC")
library("ggsci")
library("tidyverse")
list.of.packages <- c("ggsci",
"doParallel",
"Hmisc",
"parallel",
"foreach",
"risksetROC",
"cowplot",
"tidyverse",
"plyr",
"randomForestSRC",
"ggRandomForests",
"caret",
"glmnet",
"leaps",
"MASS",
"timeROC")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library("glmnet")
library("survival")
library("survminer")
library("survivalROC")
library("ggsci")
library("tidyverse")
library("cowplot")
library("pheatmap")
library("ggplot2")
library("foreach")
library("doParallel")
library("randomForestSRC")
library("ggRandomForests")
library("Hmisc")
library("risksetROC")
library("plyr")
library("preprocessCore")
library("caret")
library("MASS")
library("leaps")
library("timeROC")
###############################################
# --------
#' @说明:
# --------
# 下面代码为subsetlasso函数的示例代码，为便于演示，我将来自tcga的示例数据clin_dd按照一定比例进行分割成了两部分，分别用于模拟train和test
# 实际运用中，可以只有train，也可以有train和test
###############################################
# R软件设置工作路径
setwd("D:\\泛癌\\pan kidney cancer")
rm(list=ls())
## ---------------------------------------------------------------
#'1 @加载数据与数据预处理(注：如果数据已经归一化处理过，可略过此步骤)
## ---------------------------------------------------------------
#load("clin_dd.rda")
rt=read.table("pan_kidney cancer.txt",header=T,sep="\t",row.names=1)
clin_dd <- as.data.frame(clin_dd)
## ---------------------------------------------------------------
#'1 @加载数据与数据预处理(注：如果数据已经归一化处理过，可略过此步骤)
## ---------------------------------------------------------------
#load("clin_dd.rda")
clin_dd=read.table("pan_kidney cancer.txt",header=T,sep="\t",row.names=1)
clin_dd <- as.data.frame(clin_dd)
dd <- t(clin_dd[,3:length(clin_dd)])       # 提取基因表达数据并转置
keep <- rowSums(dd>=50) >=ncol(dd)*0.8      # 过滤掉低表达超过80%样本的基因
dd <- dd[keep,]
#1.1 vst转换
dd1 <- DESeq2::varianceStabilizingTransformation(round(dd))
save(dd1,file = "dd1_vst.rda")
dd <- t(clin_dd[,3:length(clin_dd)])       # 提取基因表达数据并转置
#keep <- rowSums(dd>=50) >=ncol(dd)*0.8      # 过滤掉低表达超过80%样本的基因
dd <- dd[keep,]
#1.1 vst转换
dd1 <- DESeq2::varianceStabilizingTransformation(round(dd))
View(dd)
## ---------------------------------------------------------------
#'1 @加载数据与数据预处理(注：如果数据已经归一化处理过，可略过此步骤)
## ---------------------------------------------------------------
load("clin_dd.rda")
###############################################
# --------
#' @说明:
# --------
# 下面代码为subsetlasso函数的示例代码，为便于演示，我将来自tcga的示例数据clin_dd按照一定比例进行分割成了两部分，分别用于模拟train和test
# 实际运用中，可以只有train，也可以有train和test
###############################################
# R软件设置工作路径
setwd("D:\\下载\\subsetlasso_0906")
rm(list=ls())
## ---------------------------------------------------------------
#'1 @加载数据与数据预处理(注：如果数据已经归一化处理过，可略过此步骤)
## ---------------------------------------------------------------
load("clin_dd.rda")
clin_dd <- as.data.frame(clin_dd)
dd <- t(clin_dd[,3:length(clin_dd)])       # 提取基因表达数据并转置
View(clin_dd)
View(clin_dd)
View(clin_dd)
keep <- rowSums(dd>=50) >=ncol(dd)*0.8      # 过滤掉低表达超过80%样本的基因
###############################################
# --------
#' @说明:
# --------
# 下面代码为subsetlasso函数的示例代码，为便于演示，我将来自tcga的示例数据clin_dd按照一定比例进行分割成了两部分，分别用于模拟train和test
# 实际运用中，可以只有train，也可以有train和test
###############################################
# R软件设置工作路径
setwd("D:\\泛癌\\pan kidney cancer")
rm(list=ls())
## ---------------------------------------------------------------
#'1 @加载数据与数据预处理(注：如果数据已经归一化处理过，可略过此步骤)
## ---------------------------------------------------------------
#load("clin_dd.rda")
clin_dd=read.table("pan_kidney cancer.txt",header=T,sep="\t",row.names=1)
clin_dd <- as.data.frame(clin_dd)
dd <- t(clin_dd[,3:length(clin_dd)])       # 提取基因表达数据并转置
#keep <- rowSums(dd>=50) >=ncol(dd)*0.8      # 过滤掉低表达超过80%样本的基因
dd <- dd[keep,]
keep <- rowSums(dd>=50) >=ncol(dd)*0.8      # 过滤掉低表达超过80%样本的基因
dd <- dd[keep,]
#1.1 vst转换
dd1 <- DESeq2::varianceStabilizingTransformation(round(dd))
dd <- t(clin_dd[,3:length(clin_dd)])       # 提取基因表达数据并转置
#keep <- rowSums(dd>=50) >=ncol(dd)*0.8      # 过滤掉低表达超过80%样本的基因
#dd <- dd[keep,]
#1.1 vst转换
dd1 <- DESeq2::varianceStabilizingTransformation(round(dd))
save(dd1,file = "dd1_vst.rda")
load("dd1_vst.rda")
# round函数将数据集里面的小数点去掉
#dd1 <- limma::voom(round(dd))$E                                       # 如若DESeq2包有问题，也可以用dd1 <- limma::voom(round(dd))$E处理
#1.2 归一化处理
dd1 <- preprocessCore::normalize.quantiles(as.matrix(dd1))
rownames(dd1) <- rownames(dd)
colnames(dd1) <- colnames(dd)
dd <- as.data.frame(t(dd1))
#1.3 合并生存数据
clin_dd <- data.frame(times=clin_dd$times, status=clin_dd$status,dd)
## ---------------------------------------------------------------
#'2 @模拟训练和测试数据集准备
## ---------------------------------------------------------------
#2.1 训练数据集
names <- rownames(clin_dd)
set.seed(123)                  # 设置种子，以便后续结果重复
samp <- createDataPartition(clin_dd$status, p = 0.6, list = FALSE)    # 随机选择60%的数据作为模拟训练集，实际操作用训练集应该是一个来源的数据
train <- clin_dd[samp,]
#2.2 测试数据集
test <- clin_dd[-samp,]        # 剩下数据用于模拟外部测试集，实际操作中测试集应该是另一个来源的数据集
#'3 @运行subsetlasso函数
## ---------------------------------------------------------------
# 加载subsetlasso包
source("subsetlasso.R")        # 保证该 subsetlasso.R 文件放于同一工作目录下
## ---------------------------------------------------------------
#' @运行并测试函数
#注意：
#（1）运行第二次，可将unicox=F，缩短运行时间；如若修改单因素显著条件coxcut，则需将unicox改为T再运行一次单因素；
#（2）nloop为循环次数，可自行修改循环次数；循环次数越大，则运行时间越长，此处为缩短运行时间故设置为200次循环。
screenresults <- subsetlasso(train, test, coxpcut=0.05, HRcuthigh=1.5, unicox=T, HRcutlow=0.5, nloop=20, R2= 0.5, BootStrap=F, lambda="min", nThreads=4)
## ---------------------------------------------------------------
#'2 @模拟训练和测试数据集准备
## ---------------------------------------------------------------
#2.1 训练数据集
names <- rownames(clin_dd)
set.seed(123)                  # 设置种子，以便后续结果重复
samp <- createDataPartition(clin_dd$status, p = 0.6, list = FALSE)    # 随机选择60%的数据作为模拟训练集，实际操作用训练集应该是一个来源的数据
train <- clin_dd[samp,]
#2.2 测试数据集
test <- clin_dd[-samp,]        # 剩下数据用于模拟外部测试集，实际操作中测试集应该是另一个来源的数据集
#'3 @运行subsetlasso函数
## ---------------------------------------------------------------
# 加载subsetlasso包
source("subsetlasso.R")        # 保证该 subsetlasso.R 文件放于同一工作目录下
## ---------------------------------------------------------------
#' @运行并测试函数
#注意：
#（1）运行第二次，可将unicox=F，缩短运行时间；如若修改单因素显著条件coxcut，则需将unicox改为T再运行一次单因素；
#（2）nloop为循环次数，可自行修改循环次数；循环次数越大，则运行时间越长，此处为缩短运行时间故设置为200次循环。
screenresults <- subsetlasso(train, test, coxpcut=0.05, HRcuthigh=1.5, unicox=T, HRcutlow=0.5, nloop=20, R2= 0.5, BootStrap=F, lambda="min", nThreads=4)
##########
#' @函数2：coletdata函数
##########
#格式为：coletdata(data)
# -----------
#' @函数说明:
# -----------
#  @data：为subsetlasso运行后的结果，该函数提取内部验证集，外部测试集和整个训练集的cindex，1年、3年、5年AUC值，并计算各自均值
#' @运行并测试函数
collectdata <- coletdata(screenresults)
##########
#格式为：bestdata(data, screenresults, testauc.1y, testauc.3y, testauc.5y, trainauc.1y,trainauc.3y,trainauc.5y,test.cindex,train.cindex,n=1)
# -----------
#' @函数说明:
# -----------
#  @data：        为coletdata的结果
#  @screenresults 为subsetlasso的结果
#  @testauc.1y, testauc.3y, testauc.5y, trainauc.1y,trainauc.3y,trainauc.5y,test.cindex,train.cindex分别为进行筛选的各自阈值条件
#  该函数首先筛选同时大于设定阈值的数据，最后筛选测试集中1y，3y和5y平均AUC值最大者（n=1）或者测试集中1y，3y和5y平均AUC值前x位（n=(1:x)）
#' @运行并测试函数
best.results<- bestdata(data=collectdata, screenresults=screenresults, testauc.1y=0.6, testauc.3y=0.6, testauc.5y=0.6,
trainauc.1y=0.6, trainauc.3y=0.6, trainauc.5y=0.6,
test.cindex=0.6,train.cindex=0.6,n=c(1:5))
#' @保存循环全部筛选结果和最佳筛选结果
save(screenresults, file = "screenresults.rda")
save(best.results, file = "best.results.rda")
## ---------------------------------------------------------------
#'4 @建模结果展示
## ---------------------------------------------------------------
#4.1 训练集和测试集time-auc曲线
library("timeROC")
ttest <- test
ttrain <- train
ttest$riskscore <- as.numeric(strsplit(best.results$subsetvars_Extertest.riskscore,"#")[[1]])
ttrain$riskscore <- as.numeric(strsplit(best.results$subsetvars_Train.riskscore,"#")[[1]])
ROC.ttest <- timeROC(T=ttest$times/365,delta=ttest$status,
marker=ttest$riskscore, cause=1,
times=quantile(ttest$times/365, probs=seq(0.2,0.9,0.01)),
iid=TRUE)
ROC.ttrain<-timeROC(T=ttrain$times/365, delta=ttrain$status,
marker=ttrain$riskscore, cause=1,
times=quantile(ttrain$times/365, probs=seq(0.2,0.9,0.01)),
iid=TRUE)
plotAUCcurve(ROC.ttest, conf.int=TRUE, col="#0073C2FF")
plotAUCcurve(ROC.ttrain, conf.int=TRUE, col="#EFC000FF",add=TRUE)
legend("topleft", c("test","train"), col=c("#0073C2FF","#EFC000FF"), lty=1, lwd=2)
#4.2 生存分析
res.cut <- surv_cutpoint(ttrain, time = "times",
event = "status",
variables = "riskscore")
res.cut <- res.cut$cutpoint[[1]]
# ttrian和ttest选一个
###############
Data <- ttrain#
Data <- ttest #
###############
risk <- as.vector(ifelse(Data$riskscore >= res.cut,"high","low"))
Data$risk <- risk
Sur <- Surv(Data$times/365*12, Data$status)
sfit <- survfit(Sur ~ risk, data=Data)
ggsurvplot(sfit,
conf.int=F,    # 置信区间
#fun="pct",
pval=TRUE,
palette = "jco",
pval.method = T,
risk.table =T,
ncensor.plot = T,
surv.median.line="hv",
legend.labs=c("high risk","low risk"))+
labs(x = "Month")
#4.3 不同时间点的ROC曲线
t1 <- 12
t2 <- 36
t3 <- 60
# ttrian和ttest选一个
###############
data <- ttrain#
data <- ttest #
surt1 <- survivalROC(Stime=data$times/365*12, status=data$status, marker = data$riskscore,
predict.time =t1, method="KM")
surt2 <- survivalROC(Stime=data$times/365*12, status=data$status, marker = data$riskscore,
predict.time =t2, method="KM")
surt3 <- survivalROC(Stime=data$times/365*12, status=data$status, marker = data$riskscore,
predict.time =t3, method="KM")
plot(surt1$FP, surt1$TP, type="l", xlim=c(0,1), ylim=c(0,1),col='#8F7700FF',
xlab="1-Specificity (FPR)", ylab="Sensitivity (TPR)",
lwd = 2, cex.main=1.3, cex.lab=1.2, cex.axis=1.2, font=1.2)
lines(x=surt2$FP, y=surt2$TP, lwd=2, type="l", col="#0073C2FF")
lines(x=surt3$FP, y=surt3$TP, lwd=2, type="l", col="#EFC000FF")
legend.paste <- c(paste0(t1," month AUC=", round(surt1$AUC,3)),
paste0(t2," month AUC=", round(surt2$AUC,3)),
paste0(t3," month AUC=", round(surt3$AUC,3)))
legend("bottomright", legend.paste, fill=c('#8F7700FF',"#0073C2FF","#EFC000FF"), bty="n", cex=.8,
border = NA, y.intersp=1, x.intersp=0.2 )
abline(0,1)
#4.4 风险因子关联图
# ttrian和ttest选一个
###############
Data <- ttrain#
Data <- ttest #
###############
bestvars <- strsplit(best.results$subset_vars,"#")[[1]]
fp <- Data$riskscore
names(fp) <- rownames(Data)
fp<-fp[fp<=10]
fp_dat <- data.frame(s=1:length(fp), v=as.numeric(sort(fp)))
fp_dat$Risk <- ifelse(fp_dat$v >= res.cut,"high","low")
sur_dat <- data.frame(s=1:length(fp),
t=Data[names(sort(fp)),'times']/365*12,
e=Data[names(sort(fp)),'status'])
sur_dat$Status <- as.factor(ifelse(sur_dat$e==0,'alive','death'))
exp_dat <- Data[names(sort(fp)), which(colnames(Data) %in% bestvars)]
#图A：绘制riskScore分布图
plot.point <- ggplot(fp_dat, aes(x=s,y=v))+
geom_point(aes(col=Risk), size=0.5)+
geom_segment(aes(x = sum(fp_dat$Risk=="low"),
y = min(fp_dat$v),
xend = sum(fp_dat$Risk=="low"),
yend = res.cut),linetype="dashed")+
geom_segment(aes(x=0, y=res.cut,
xend=sum(fp_dat$Risk=="low"),
yend=res.cut),linetype="dashed")+
geom_text(aes(x=sum(fp_dat$Risk=="low")/2,
y=res.cut+5,
label=paste0("Cutoff: ",round(res.cut,3))),
col ="black",size = 4,alpha=0.8)+
theme(axis.title.x=element_blank())+
scale_x_continuous(limits = c(0,NA),expand = c(0,0))+
labs(y="Risk score", fill="Risk")+
scale_color_jco()
#图B：绘制生存事件分布图
plot.sur <- ggplot(sur_dat,aes(x=s,y=t))+
geom_point(aes(col=Status), size=0.5)+
geom_vline(aes(xintercept=sum(fp_dat$Risk=="low")), linetype="dashed")+
scale_colour_jco()+
theme(axis.title.x=element_blank())+
scale_x_continuous(limits = c(0,NA), expand = c(0,0))+
scale_fill_discrete(labels=c("Alive", "Dead"))+
labs(y="Survival time(months)")
#图C：绘制风险热图
mycolors <- colorRampPalette(c("royalblue","tomato"), bias = 1.5)(150)
tmp<-t(scale(exp_dat))
tmp[tmp > 1] = 1
tmp[tmp < -1] = -1
plot.h <- pheatmap::pheatmap(tmp,col=,show_colnames = F, cluster_cols = F)
#拼接，导出图片，不能导出pdf，颜色会出现偏差
plot_grid(plot.point, plot.sur, plot.h$gtable,
labels = c("A", "B","C"),
label_x=0,
label_y=1,
align = 'v',ncol = 1,axis="t")
## ---------------------------------------------------------------
#'5 @复现lasso筛选变量
## ---------------------------------------------------------------
load("Unitrain_coxpcut-0.05HRcuthigh-1.5_HRcutlow-0.5.Rda")
MultiNames <- as.character(Uni_pvalue$Characteristics)
dd1 <- train[,colnames(train) %in% MultiNames]
Train <- data.frame(times=train$times,status=train$status,dd1)
seed <- as.numeric(best.results$nloop)
train_num <- c(as.numeric(strsplit(best.results$train_number,"#")[[1]]))
TTrain<-Train[train_num,]
formula <- as.formula(Surv(TTrain$times+1, TTrain$status)~.)
mod <- model.matrix(formula, TTrain)
set.seed(seed)
cv.fitA <- cv.glmnet(mod,Surv(TTrain$times+1, TTrain$status), type.measure = "deviance", family = "cox")
plot(cv.fitA)
plot(cv.fitA$glmnet.fit)
coeA <- coef(cv.fitA$glmnet.fit, s=cv.fitA$lambda.min)
tA.active.coef <- coeA[which(coeA[,1]!=0)]
(tA.name <- row.names(coeA)[which(coeA[,1]!=0)])              # 复现lasso筛选出来的基因
(lasso_vars <- strsplit(best.results$lasso_vars,"#")[[1]])    # 循环中lasso筛选出来的基因
#'6 @复现bestsubset筛选变量过程(只在lasso_vars多于10个基因的情况下进行最优子集筛选)
if(as.numeric(best.results$nlasso_vars[[1]])>10){
Sur <- Surv(train[train_num,]$times+1, train[train_num,]$status)
fml <- as.formula(paste0('Sur~',paste(tA.name,collapse = '+')))
regsub <- regsubsets(fml,data = train[train_num,],nvmax=length(tA.name))
regsubsum <- summary(regsub)
print((bestname <- tA.name[regsubsum$which[,-1][which.min(regsubsum$cp),]]))
print((subset_vars <- strsplit(best.results$subset_vars,"#")[[1]]))
plot(regsub, scale="Cp")
}else{
stop("The number of lasso_vars is less than 10!")
}
#4.2 生存分析
res.cut <- surv_cutpoint(ttrain, time = "times",
event = "status",
variables = "riskscore")
res.cut <- res.cut$cutpoint[[1]]
# ttrian和ttest选一个
###############
Data <- ttrain
#Data <- ttest
###############
risk <- as.vector(ifelse(Data$riskscore >= res.cut,"high","low"))
Data$risk <- risk
Sur <- Surv(Data$times/365*12, Data$status)
sfit <- survfit(Sur ~ risk, data=Data)
ggsurvplot(sfit,
conf.int=F,    # 置信区间
#fun="pct",
pval=TRUE,
palette = "jco",
pval.method = T,
risk.table =T,
ncensor.plot = T,
surv.median.line="hv",
legend.labs=c("high risk","low risk"))+
labs(x = "Month")
#4.2 生存分析
res.cut <- surv_cutpoint(ttrain, time = "times",
event = "status",
variables = "riskscore")
res.cut <- res.cut$cutpoint[[1]]
# ttrian和ttest选一个
###############
#Data <- ttrain
Data <- ttest
###############
risk <- as.vector(ifelse(Data$riskscore >= res.cut,"high","low"))
Data$risk <- risk
Sur <- Surv(Data$times/365*12, Data$status)
sfit <- survfit(Sur ~ risk, data=Data)
ggsurvplot(sfit,
conf.int=F,    # 置信区间
#fun="pct",
pval=TRUE,
palette = "jco",
pval.method = T,
risk.table =T,
ncensor.plot = T,
surv.median.line="hv",
legend.labs=c("high risk","low risk"))+
labs(x = "Month")
# ttrian和ttest选一个
###############
#Data <- ttrain
Data <- ttest
write.table(ttest,file="ttest.xls",sep="\t",row.names=F,quote=F)
write.table(ttrain,file="ttrain.xls",sep="\t",row.names=F,quote=F)
plot(cv.fitA)
#图C：绘制风险热图
mycolors <- colorRampPalette(c("royalblue","tomato"), bias = 1.5)(150)
tmp<-t(scale(exp_dat))
tmp[tmp > 1] = 1
tmp[tmp < -1] = -1
plot.h <- pheatmap::pheatmap(tmp,col=,show_colnames = F, cluster_cols = F)
#拼接，导出图片，不能导出pdf，颜色会出现偏差
plot_grid(plot.point, plot.sur, plot.h$gtable,
labels = c("A", "B","C"),
label_x=0,
label_y=1,
align = 'v',ncol = 1,axis="t")
## ---------------------------------------------------------------
#'5 @复现lasso筛选变量
## ---------------------------------------------------------------
load("Unitrain_coxpcut-0.05HRcuthigh-1.5_HRcutlow-0.5.Rda")
MultiNames <- as.character(Uni_pvalue$Characteristics)
dd1 <- train[,colnames(train) %in% MultiNames]
Train <- data.frame(times=train$times,status=train$status,dd1)
seed <- as.numeric(best.results$nloop)
train_num <- c(as.numeric(strsplit(best.results$train_number,"#")[[1]]))
TTrain<-Train[train_num,]
formula <- as.formula(Surv(TTrain$times+1, TTrain$status)~.)
mod <- model.matrix(formula, TTrain)
set.seed(seed)
cv.fitA <- cv.glmnet(mod,Surv(TTrain$times+1, TTrain$status), type.measure = "deviance", family = "cox")
plot(cv.fitA)
plot(cv.fitA$glmnet.fit)
coeA <- coef(cv.fitA$glmnet.fit, s=cv.fitA$lambda.min)
tA.active.coef <- coeA[which(coeA[,1]!=0)]
###############################################
# --------
#' @说明:
# --------
# 下面代码为subsetlasso函数的示例代码，为便于演示，我将来自tcga的示例数据clin_dd按照一定比例进行分割成了两部分，分别用于模拟train和test
# 实际运用中，可以只有train，也可以有train和test
###############################################
# R软件设置工作路径
setwd("E:\\pancancer\\泛癌\\pan kidney cancer")
rm(list=ls())
## ---------------------------------------------------------------
#'1 @加载数据与数据预处理(注：如果数据已经归一化处理过，可略过此步骤)
## ---------------------------------------------------------------
#load("clin_dd.rda")
clin_dd=read.table("pan_kidney cancer.txt",header=T,sep="\t",row.names=1)
clin_dd <- as.data.frame(clin_dd)
dd <- t(clin_dd[,3:length(clin_dd)])       # 提取基因表达数据并转置
#keep <- rowSums(dd>=50) >=ncol(dd)*0.8      # 过滤掉低表达超过80%样本的基因
#dd <- dd[keep,]
#1.1 vst转换
dd1 <- DESeq2::varianceStabilizingTransformation(round(dd))
save(dd1,file = "dd1_vst.rda")
load("dd1_vst.rda")
# round函数将数据集里面的小数点去掉
#dd1 <- limma::voom(round(dd))$E                                       # 如若DESeq2包有问题，也可以用dd1 <- limma::voom(round(dd))$E处理
#1.2 归一化处理
dd1 <- preprocessCore::normalize.quantiles(as.matrix(dd1))
rownames(dd1) <- rownames(dd)
colnames(dd1) <- colnames(dd)
dd <- as.data.frame(t(dd1))
#1.3 合并生存数据
clin_dd <- data.frame(times=clin_dd$times, status=clin_dd$status,dd)
## ---------------------------------------------------------------
#'2 @模拟训练和测试数据集准备
## ---------------------------------------------------------------
#2.1 训练数据集
names <- rownames(clin_dd)
set.seed(123)                  # 设置种子，以便后续结果重复
samp <- createDataPartition(clin_dd$status, p = 0.6, list = FALSE)    # 随机选择60%的数据作为模拟训练集，实际操作用训练集应该是一个来源的数据
train <- clin_dd[samp,]
#2.2 测试数据集
test <- clin_dd[-samp,]        # 剩下数据用于模拟外部测试集，实际操作中测试集应该是另一个来源的数据集
#'3 @运行subsetlasso函数
## ---------------------------------------------------------------
# 加载subsetlasso包
source("subsetlasso.R")        # 保证该 subsetlasso.R 文件放于同一工作目录下
## ---------------------------------------------------------------
#' @运行并测试函数
#注意：
#（1）运行第二次，可将unicox=F，缩短运行时间；如若修改单因素显著条件coxcut，则需将unicox改为T再运行一次单因素；
#（2）nloop为循环次数，可自行修改循环次数；循环次数越大，则运行时间越长，此处为缩短运行时间故设置为200次循环。
screenresults <- subsetlasso(train, test, coxpcut=0.05, HRcuthigh=1.5, unicox=T, HRcutlow=0.5, nloop=20, R2= 0.5, BootStrap=F, lambda="min", nThreads=4)
